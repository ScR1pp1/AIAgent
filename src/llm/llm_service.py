import logging
from openai import AsyncOpenAI
from src.config import settings
from src.database.models import ConversationHistory
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from tenacity import retry, stop_after_attempt, wait_exponential

logger = logging.getLogger(__name__)

class LLMService:
    
    def __init__(self):
        self.client = self._create_client()
        logger.info(f"LLMService initialized with provider: {settings.ai.ai_provider}")
    
    def _create_client(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        if not settings.ai.api_key or settings.ai.api_key == "your_ai_api_key_here":
            logger.error("‚ùå AI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            raise ValueError("AI_API_KEY not configured properly")
        
        try:
            client = AsyncOpenAI(
                api_key=settings.ai.api_key,
                base_url=settings.ai.effective_base_url,
                timeout=30.0,
                max_retries=3
            )
            
            if not settings.ai.validate_model():
                logger.warning(f"–ú–æ–¥–µ–ª—å {settings.ai.effective_model} –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º {settings.ai.ai_provider}")
            
            logger.info(f"‚úÖ AI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {settings.ai.effective_base_url}")
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å: {settings.ai.effective_model}")
            return client
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    @retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=2, max=10))
    async def generate_response(
        self, 
        user_message: str, 
        chat_id: int,
        session: AsyncSession,
        mcp_results: list = None
    ) -> str:
        
        try:
            if not self.client:
                return "ü§ñ –û—à–∏–±–∫–∞: AI —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AI_API_KEY –≤ .env —Ñ–∞–π–ª–µ."
            
            history = await self._get_conversation_history(chat_id, session)
            
            system_prompt = self._build_system_prompt(mcp_results)
            
            messages = [{"role": "system", "content": system_prompt}]
            
            for msg in history[-6:]:
                messages.append(msg)
            
            messages.append({"role": "user", "content": user_message})
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {settings.ai.chat_model}")
            
            response = await self.client.chat.completions.create(
                model=settings.ai.chat_model,
                messages=messages,
                temperature=0.7,
                max_tokens=1000
            )
            
            result = response.choices[0].message.content
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI API: {e}")
            error_msg = str(e)
            
            if "401" in error_msg:
                return "ü§ñ –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AI_API_KEY –≤ .env —Ñ–∞–π–ª–µ."
            elif "429" in error_msg:
                return "ü§ñ –û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            elif "404" in error_msg:
                return f"ü§ñ –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å '{settings.ai.chat_model}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AI_CHAT_MODEL –≤ .env —Ñ–∞–π–ª–µ."
            else:
                return f"ü§ñ –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å AI —Å–µ—Ä–≤–∏—Å–æ–º: {error_msg[:100]}..."
    
    async def _get_conversation_history(
        self, 
        chat_id: int, 
        session: AsyncSession,
        limit: int = 20
    ) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            stmt = select(ConversationHistory).where(
                ConversationHistory.chat_id == chat_id
            ).order_by(ConversationHistory.timestamp.desc()).limit(limit)
            
            result = await session.execute(stmt)
            messages = result.scalars().all()
            
            history = []
            for msg in reversed(messages):
                history.append({"role": "user", "content": msg.user_message})
                history.append({"role": "assistant", "content": msg.bot_response})
            
            logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è chat_id {chat_id}")
            return history
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    def _build_system_prompt(self, mcp_results: list = None) -> str:
        """–°—Ç—Ä–æ–∏—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        base_prompt = """–¢—ã - HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è IT-—Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–º–æ–≥–∞—Ç—å —Å –ø–æ–∏—Å–∫–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, 
–∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∑—é–º–µ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞–π–º–∞.

–¢—ã –∏–º–µ–µ—à—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–≤—ã–∫–∞–º)
- GitHub –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
- –í–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- Google Sheets –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
- –ë–∞–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π

–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç:
- "–ù–∞–π–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å Python" ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
- "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π github.com/username" ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π GitHub
- "–ö–∞–∫–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã?" ‚Üí –ø—Ä–æ–≤–µ—Ä—å –±–∞–∑—É –≤–∞–∫–∞–Ω—Å–∏–π
- "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ..." ‚Üí –∏—Å–ø–æ–ª—å–∑—É–π –≤–µ–±-–ø–æ–∏—Å–∫

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º.
–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å."""

        if mcp_results:
            base_prompt += "\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞:"
            for result in mcp_results:
                base_prompt += f"\n- {result.get('tool', 'Unknown')}"
        
        return base_prompt
    
    async def generate_embeddings(self, text: str) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        try:
            if not self.client:
                return [0.0] * 1536
                
            response = await self.client.embeddings.create(
                model=settings.ai.embeddings_model,
                input=text
            )
            return response.data[0].embedding
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            return [0.0] * 1536