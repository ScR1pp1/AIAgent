import os
import sys
import logging
import asyncio
from telegram import Update, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes
)
from sqlalchemy.ext.asyncio import AsyncSession

current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

try:
    from src.config import settings
    from src.database.database import AsyncSessionLocal
    from src.memory.session_manager import session_manager
    from src.llm.llm_service import LLMService
    from src.mcp.mcp_client import mcp_client
    from src.knowledge.vector_search import VectorSearchService
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
    print("üìÅ –ü—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:", project_root)
    sys.exit(1)

logger = logging.getLogger(__name__)

class HRAssistantBot:
    
    def __init__(self):
        self.application = None
        self.is_running = False
        
        try:
            self.llm_service = LLMService()
            logger.info("‚úÖ LLMService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLMService: {e}")
            self.llm_service = None
        
        try:
            self.vector_search = VectorSearchService()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VectorSearch: {e}")
            self.vector_search = None
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR Assistant Bot!

–Ø –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è IT-—Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–∞.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/health - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å!
        """
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = """
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É  
/health - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é

üéØ **–ß—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å:**

‚Ä¢ –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏–∑ GitHub –ø—Ä–æ—Ñ–∏–ª–µ–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–µ
        """
        await update.message.reply_text(help_text)
    
    async def health_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            from src.database.database import check_db_connection
            from src.mcp.services import check_mcp_services
            
            db_status = await check_db_connection()
            mcp_status = await check_mcp_services()
            
            service_names = {
                "github": "GitHub",
                "web_search": "Web Search", 
                "google_sheets": "Google Sheets"
            }
            
            mcp_services_text = ""
            for service, status in mcp_status.items():
                status_icon = "üü¢" if status else "üî¥"
                name = service_names.get(service, service.replace('_', ' ').title())
                mcp_services_text += f"‚Ä¢ {name}: {status_icon}\n"
            
            ai_status = "üü¢" if self.llm_service and self.llm_service.client else "üî¥"
            
            health_status = "üü¢ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç" if db_status and all(mcp_status.values()) else "üü° –ß–∞—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã" if db_status else "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
            
            status_text = f"""
{health_status}

üìä **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:**
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'üü¢' if db_status else 'üî¥'}
‚Ä¢ Telegram API: üü¢
‚Ä¢ AI —Å–µ—Ä–≤–∏—Å: {ai_status}

üîß **MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**
{mcp_services_text}
            """
    
            await update.message.reply_text(status_text)
            
        except Exception as e:
            logger.error(f"Health check error: {e}")
            await update.message.reply_text("üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞")
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        chat_id = update.effective_chat.id
        async with AsyncSessionLocal() as session:
            await session_manager.clear_session(chat_id, session)
        
        await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_message = update.message.text
        chat_id = update.effective_chat.id
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {user_message}")
        
        try:
            simple_response = self._get_simple_response(user_message)
            if simple_response:
                await update.message.reply_text(simple_response)
                return
            
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")
            
            async with AsyncSessionLocal() as session:
                if self.llm_service and self.llm_service.client:
                    mcp_results = await self._process_user_request(user_message, session)
                    response = await self.llm_service.generate_response(
                        user_message=user_message,
                        chat_id=chat_id,
                        session=session,
                        mcp_results=mcp_results
                    )
                else:
                    response = "ü§ñ –†–µ–∂–∏–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏. AI —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è."
                
                await session_manager.save_conversation(
                    chat_id=chat_id,
                    user_message=user_message,
                    bot_response=response,
                    session=session
                )
                await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            error_message = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            await update.message.reply_text(error_message)

    async def _process_user_request(self, user_message: str, session: AsyncSession) -> list:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
        mcp_results = []
        
        if not settings.mcp.enable_mcp:
            return mcp_results
            
        try:
            message_lower = user_message.lower()
            
            if any(keyword in message_lower for keyword in ['github', '–ø—Ä–æ—Ñ–∏–ª—å', '—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', 'git']):
                github_result = await self._handle_github_request(user_message)
                if github_result:
                    mcp_results.append({"tool": "github", "result": github_result})
            
            if any(keyword in message_lower for keyword in ['–Ω–∞–π–¥–∏', '–ø–æ–∏—â–∏', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'search']):
                search_result = await self._handle_web_search(user_message)
                if search_result:
                    mcp_results.append({"tool": "web_search", "result": search_result})
            
            if any(keyword in message_lower for keyword in ['—Ç–∞–±–ª–∏—Ü', 'sheet', 'excel', '–æ–±–Ω–æ–≤–∏']):
                sheets_result = await self._handle_sheets_request(user_message)
                if sheets_result:
                    mcp_results.append({"tool": "google_sheets", "result": sheets_result})
                    
        except Exception as e:
            logger.error(f"Error in MCP processing: {e}")
        
        return mcp_results
    
    async def _handle_github_request(self, message: str) -> str:
        try:
            words = message.split()
            for word in words:
                if 'github.com/' in word:
                    username = word.split('github.com/')[-1].split('/')[0]
                    return await mcp_client.github.get_user_profile(username)
            
            return await mcp_client.github.search_repositories(message)
            
        except Exception as e:
            logger.error(f"GitHub request error: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GitHub: {str(e)}"
    
    async def _handle_web_search(self, message: str) -> str:
        try:
            search_query = self._extract_search_query(message)
            
            if not search_query:
                return "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏"
                
            result = await mcp_client.web_search.search_web(search_query, num_results=3)
            return result
            
        except Exception as e:
            logger.error(f"Web search error: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"

    def _get_simple_response(self, message: str) -> str:
        """–ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ LLM"""
        message_lower = message.lower()
        
        responses = {
            '–ø—Ä–∏–≤–µ—Ç': 'üëã –ü—Ä–∏–≤–µ—Ç! –Ø HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
            'hello': 'üëã Hello! I am HR Assistant. How can I help you?',
            '–∫–∞–∫ –¥–µ–ª–∞': 'ü§ñ –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.',
            'help': 'üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥',
            'start': 'üöÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã',
            'health': 'üè• –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /health –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞',
            'test': 'üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç!',
            '—Ç–µ—Å—Ç': 'üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        }
        
        for key, response in responses.items():
            if key in message_lower:
                return response
        
        return None

    def _extract_search_query(self, message: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        search_keywords = ['–Ω–∞–π–¥–∏', '–ø–æ–∏—â–∏', '–∏—â–∏', 'search', 'find', 'google']
        
        words = message.lower().split()
        query_words = []
        
        collect = False
        for word in words:
            if word in search_keywords:
                collect = True
                continue
            if collect:
                if word not in ['–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ø—Ä–æ', '–æ', 'the', 'a', 'an']:
                    query_words.append(word)
        
        if not query_words:
            bot_names = ['–±–æ—Ç', 'bot', 'assistant', '–ø–æ–º–æ—â–Ω–∏–∫']
            query_words = [word for word in words if word not in bot_names]
        
        return ' '.join(query_words).strip()
    
    async def _handle_sheets_request(self, message: str) -> str:
        try:
            if '–ø—Ä–æ—á–∏—Ç–∞–π' in message.lower() or '–ø–æ–∫–∞–∂–∏' in message.lower():
                return await mcp_client.sheets.read_spreadsheet(
                    "your-spreadsheet-id", "A1:D10"
                )
            elif '–æ–±–Ω–æ–≤–∏' in message.lower():
                return "Google Sheets: –ì–æ—Ç–æ–≤ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É (–Ω—É–∂–µ–Ω spreadsheet_id)"
            else:
                return "Google Sheets: –ú–æ–≥—É —á–∏—Ç–∞—Ç—å –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"
                
        except Exception as e:
            logger.error(f"Google Sheets error: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Sheets: {str(e)}"
    
    async def setup_commands(self):
        commands = [
            BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
            BotCommand("help", "–ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã"),
            BotCommand("health", "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"),
            BotCommand("clear", "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
        ]
        await self.application.bot.set_my_commands(commands)
    
    def run(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ HR Assistant Bot...")
        
        if not settings.telegram.bot_token:
            print("‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        try:
            self.application = (
                Application.builder()
                .token(settings.telegram.bot_token)
                .build()
            )
            
            self.application.add_handler(CommandHandler("start", self.start))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("health", self.health_command))
            self.application.add_handler(CommandHandler("clear", self.clear_command))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.setup_commands())
            
            print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print("üöÄ –ó–∞–ø—É—Å–∫...")
            print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤–∞—à–µ–º—É –±–æ—Ç—É –≤ Telegram")
            print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
            self.application.run_polling(
                drop_pending_updates=True,
                close_loop=False
            )
            
        except KeyboardInterrupt:
            print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()

bot_instance = HRAssistantBot()

async def stop_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ main.py"""
    if bot_instance.application and bot_instance.is_running:
        await bot_instance.application.stop()
        await bot_instance.application.shutdown()
        bot_instance.is_running = False
        logger.info("Telegram bot stopped")

async def check_bot_health() -> dict:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    try:
        from src.config import settings
        
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://api.telegram.org/bot{settings.telegram.bot_token}/getMe",
                timeout=10
            ) as response:
                bot_ok = response.status == 200
                
        try:
            from src.memory.session_manager import session_manager
            active_sessions = len(session_manager.active_sessions)
        except Exception:
            active_sessions = 0
            
        return {
            "status": "healthy" if bot_ok else "unhealthy",
            "message": "Bot is connected to Telegram API" if bot_ok else "Bot is not connected",
            "active_sessions": active_sessions,
            "telegram_api": bot_ok
        }
        
    except Exception as e:
        logger.error(f"Error checking bot health: {e}")
        return {
            "status": "unhealthy",
            "message": f"Health check error: {str(e)}",
            "active_sessions": 0,
            "telegram_api": False
        }

if __name__ == "__main__":
    bot = HRAssistantBot()
    bot.run()