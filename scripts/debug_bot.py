"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –±–æ—Ç–æ–º
"""
import asyncio
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from src.config import settings
from src.database.database import AsyncSessionLocal, check_db_connection
from src.llm.llm_service import LLMService
from src.mcp.mcp_client import mcp_client
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_llm_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º LLM —Å–µ—Ä–≤–∏—Å"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM —Å–µ—Ä–≤–∏—Å–∞...")
    
    llm_service = LLMService()
    
    if not llm_service.client:
        print("‚ùå LLM –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False
    
    print(f"‚úÖ LLM –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {llm_service.client.base_url}")
    
    try:
        test_message = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ: —Ç–µ—Å—Ç"
        async with AsyncSessionLocal() as session:
            response = await llm_service.generate_response(
                user_message=test_message,
                chat_id=12345,
                session=session
            )
        
        print(f"‚úÖ LLM –æ—Ç–≤–µ—Ç–∏–ª: {response[:100]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ LLM: {e}")
        return False

async def test_mcp_services():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º MCP —Å–µ—Ä–≤–∏—Å—ã"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    services = {
        "GitHub": mcp_client.github,
        "Web Search": mcp_client.web_search,
        "Google Sheets": mcp_client.sheets
    }
    
    all_working = True
    
    for name, client in services.items():
        try:
            if hasattr(client, 'base_url'):
                print(f"   {name}: {client.base_url} - ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print(f"   {name}: ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                all_working = False
                
        except Exception as e:
            print(f"   {name}: ‚ùå –û—à–∏–±–∫–∞ - {e}")
            all_working = False
    
    return all_working

async def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        is_connected = await check_db_connection()
        if is_connected:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return True
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def test_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        "TELEGRAM_BOT_TOKEN",
        "AI_API_KEY",
        "AI_PROVIDER"
    ]
    
    for var in required_vars:
        value = getattr(settings, var, None) or getattr(settings.ai, var.lower(), None)
        if value and len(str(value)) > 5:
            print(f"   {var}: ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print(f"   {var}: ‚ùå –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")

async def main():
    print("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ HR Assistant Bot...\n")
    
    await test_environment()
    await test_database()
    await test_mcp_services()
    await test_llm_service()
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
    print("‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ AI_PROVIDER –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å")
    print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å–∞ (OpenRouter/Ollama)")
    print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–º–∞–Ω–¥–æ–π: docker-compose logs app --tail=20")

if __name__ == "__main__":
    asyncio.run(main())
