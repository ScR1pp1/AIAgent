services:
  db:
    image: postgres:15
    container_name: hr_assistant_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hr_assistant}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-myfirsttgbot}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hr_network

  redis:
    image: redis:7-alpine
    container_name: hr_assistant_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hr_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr_assistant_app
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hr_assistant}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-myfirsttgbot}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      AI_API_KEY: ${AI_API_KEY}
      AI_PROVIDER: ${AI_PROVIDER:-groq}
      AI_BASE_URL: ${AI_BASE_URL:-https://api.groq.com/openai/v1}
      AI_CHAT_MODEL: ${AI_CHAT_MODEL:-openai/gpt-oss-120b}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8080:8000"
    volumes:
      - ./conversations:/app/conversations
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - hr_network
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr_assistant_bot
    environment:
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      AI_API_KEY: ${AI_API_KEY}
      AI_PROVIDER: ${AI_PROVIDER:-groq}
      AI_BASE_URL: ${AI_BASE_URL:-https://api.groq.com/openai/v1}
      AI_CHAT_MODEL: ${AI_CHAT_MODEL:-openai/gpt-oss-120b}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-hr_assistant}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-myfirsttgbot}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - db
      - redis
    networks:
      - hr_network
    restart: unless-stopped
    command: python -u src/bot/telegram_bot.py

  mcp_github:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr_mcp_github
    environment:
      GITHUB_TOKEN: ${GITHUB_TOKEN}
    ports:
      - "8001:8001"
    networks:
      - hr_network
    restart: unless-stopped
    command: uvicorn src.mcp.http_servers:app_github --host 0.0.0.0 --port 8001

  mcp_web_search:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr_mcp_web_search
    environment:
      WEB_SEARCH_API_KEY: ${WEB_SEARCH_API_KEY}
    ports:
      - "8002:8002"
    networks:
      - hr_network
    restart: unless-stopped
    command: uvicorn src.mcp.http_servers:app_web_search --host 0.0.0.0 --port 8002

  mcp_sheets:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr_mcp_sheets
    environment:
      GOOGLE_CREDENTIALS_PATH: /app/google_credentials.json
    volumes:
      - ./google_credentials.json:/app/google_credentials.json
    ports:
      - "8003:8003"
    networks:
      - hr_network
    restart: unless-stopped
    command: uvicorn src.mcp.http_servers:app_sheets --host 0.0.0.0 --port 8003
  
  cleanup:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr_cleanup
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
    depends_on:
      - db
    networks:
      - hr_network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 30 &&
        python scripts/cleanup_old_messages.py
      "
    restart: "no"

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: hr_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@hr-assistant.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - hr_network
    restart: unless-stopped
    depends_on:
      - db

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  hr_network:
    driver: bridge
